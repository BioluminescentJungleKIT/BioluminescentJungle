//if distance does not fit current lod, move one level up or down through appending (atomic counter & bitmap)
layout(std430, binding = 0) buffer upInstanceCount
{
    uint upCount;
};

layout(std430, binding = 1) buffer upBufferMetadata
{
    uint upSize;
    uint upBitmap[];
};

layout(std430, binding = 2) buffer upTransformBuffer
{
    mat4 upTransforms[];
};

layout(std430, binding = 3) buffer instanceCount
{
    uint count;
};

layout(std430, binding = 4) buffer bufferMetadata
{
    uint size;
    uint bitmap[];
};

layout(std430, binding = 5) buffer transformBuffer
{
    mat4 transforms[];
};

layout(std430, binding = 6) buffer downInstanceCount
{
    uint downCount;
};

layout(std430, binding = 7) buffer downBufferMetadata
{
    uint downSize;
    uint downBitmap[];
};

layout(std430, binding = 8) buffer downTransformBuffer
{
    mat4 downTransforms[];
};

layout( push_constant ) uniform vec4 constants;
// x hasHigher
// y hasLower
// z lodDistMax
// w lodDistMin

void move(uint oldIdx, int upOrDown) {
    if (upOrDown == 0) return;
    else if (upOrDown == 1) {
        if (!bool(constants.x)) return;
        uint newIdx = atomicAdd(upSize, 1);
        upTransforms[newIdx] = transforms[oldIdx];
        atomicAdd(upCount, 1);
        atomicAdd(count, -1);
        atomicAnd(bitmap[oldIdx/32], ~(1 >> (oldIdx % 32)));
        atomicOr(upBitmap[newIdx/32], 1 >> (newIdx % 32));
    } else if (upOrDown == -1) {
        if (!bool(constants.y)) return;
        uint newIdx = atomicAdd(downSize, 1);
        downTransforms[newIdx] = transforms[oldIdx];
        atomicAdd(downCount, 1);
        atomicAdd(count, -1);
        atomicAnd(bitmap[oldIdx/32], ~(1 >> (oldIdx % 32)));
        atomicOr(downBitmap[newIdx/32], 1 >> (newIdx % 32));
    }
}

void main() {
    uint index = gl_InvocationID;
    if (index < count) {
        vec3 position = transforms[index][3].xyz;
        float distance = distance(position, camera_position);
        int moveTo = int(distance > constants.z) - int(distance < constants.w);
        move(index, moveTo);
    }
}