#version 450

#include "geometry.glsl"
#include "restir.glsl"

layout(set = 0, binding = 0) uniform sampler2D albedo;
layout(set = 0, binding = 1) uniform sampler2D depth;
layout(set = 0, binding = 2) uniform sampler2D normal;
layout(set = 0, binding = 3) uniform sampler2D motion;

layout(set = 1, binding = 0) uniform writeonly image2D compositeLight;
layout(set = 1, binding = 1, std140) uniform LightInfoBlock {
    SceneLightInfo slInfo;
};

layout(std140, set = 1, binding = 2) readonly buffer PointLightIn {
    PointLight pointLights[];
};

layout(std140, set = 1, binding = 3) uniform Params {
    int nPointLights;
    int nTriangles;
    int nEmissiveTriangles;
};

layout(std140, set = 1, binding = 4) readonly buffer TrianglesIn {
    Triangle tris[];
};

layout(std140, set = 1, binding = 5) readonly buffer EmissiveTrianglesIn {
    EmissiveTriangle emissiveTris[];
};

layout(std140, set = 1, binding = 6) readonly buffer BVHIn {
    BVHNode bvh[];
};

layout(std430, set = 1, binding = 7) readonly buffer ReservoirsOld {
    Reservoir reservoirsOld[];
};

layout(std430, set = 1, binding = 8) writeonly buffer ReservoirsTmp {
    Reservoir reservoirsTmp[];
};

layout(set = 2, binding = 0) uniform sampler2D prevAlbedo;
layout(set = 2, binding = 1) uniform sampler2D prevDepth;
layout(set = 2, binding = 2) uniform sampler2D prevNormal;
layout(set = 2, binding = 3) uniform sampler2D prevMotion;

#define MAX_STACK_SIZE 32

Ray getLightRay(SurfacePoint point, vec3 lightPos, out float len) {
    Ray lightRay;
    lightRay.origin = point.worldPos + point.N * (-point.dispAlongN + 0.002);
    lightRay.dir = lightPos - lightRay.origin;

    len = length(lightRay.dir);
    lightRay.dir /= len;
    lightRay.invDir = 1.0 / lightRay.dir;

    return lightRay;
}

bool testShadowBruteforce(SurfacePoint point, vec3 lightPos) {
    float rayLen;
    Ray lightRay = getLightRay(point, lightPos, rayLen);

    const vec2 tmimaxInit = vec2(0.01, rayLen);
    for (int i = 0; i < nTriangles; i++) {
        float f = intersectTriangle(tris[i], lightRay);
        if (tmimaxInit.x <= f && f < tmimaxInit.y) {
            return true;
        }
    }

    return false;
}

bool doesIntersectAABB(int node, vec2 tmimaxInit, Ray lightRay) {
    vec3 aabb[2];
    aabb[0] = bvh[node].low.xyz;
    aabb[1] = bvh[node].high.xyz;

    vec2 isec = intersectAABB(aabb, lightRay, tmimaxInit);
    return isec.x <= isec.y;
}

bool testShadowAABB(SurfacePoint point, vec3 lightPos) {
    float rayLen;
    Ray lightRay = getLightRay(point, lightPos, rayLen);

    int stack[MAX_STACK_SIZE];
    stack[0] = 0;
    int cur = 0;

    const vec2 tmimaxInit = vec2(0.1, rayLen - 0.03);
    if (!doesIntersectAABB(0, tmimaxInit, lightRay)) {
        return false;
    }

    // Recursive test in the BVH
    while (cur >= 0) {
        int node = stack[cur];
        cur -= 1;

        // Leaf node
        if (bvh[node].left <= 0) {
            float f = intersectTriangle(tris[-bvh[node].left], lightRay);
            if (tmimaxInit.x <= f && f < tmimaxInit.y) {
                return true;
            }

            continue;
        }

        if (doesIntersectAABB(bvh[node].left, tmimaxInit, lightRay)) {
            stack[cur + 1] = bvh[node].left;
            cur++;
        }

        if (doesIntersectAABB(bvh[node].right, tmimaxInit, lightRay)) {
            stack[cur + 1] = bvh[node].right;
            cur++;
        }
    }

    return false;
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

PointLightParams getPointLight(int idx) {
    return computeLightParams(pointLights[idx]);
}

void getEmissiveTriangle(int idx, out vec3 emission, out vec3 N, out float area) {
    getEmissiveTriangleParams(emissiveTris[idx], emission, N, area);
}

vec3 pickRndPointOnTriangle(vec3 a, vec3 b, vec3 c, inout uint rndState) {
    float r1 = nextRand(rndState);
    float r2 = nextRand(rndState);
    float s = 1 - sqrt(1 - r1);
    float t = (1 - s) * r2;
    return a + s * (b - a) + t * (c - a);
}

// Very naive lighting: shoot a ray to each light, bruteforce hit triangles.
vec3 naiveLighting(SurfacePoint point, float depth) {
    vec3 finalColor = vec3(0.0);
    for (int i = 0; i < nPointLights; i++) {
        PointLightParams light = computeLightParams(pointLights[i]);
        if (depth < 0.999 && !testShadowBruteforce(point, light.pos)) {
            float f = evalPointLightStrength(point, light);
            f *= evalFogAbsorption(point, slInfo);
            finalColor += f * light.intensity;
        }
    }

    return finalColor;
}

// Naive lighting: shoot a ray to each light source, but use BVH for shadow ray.
vec3 naiveLightingBVH(ivec2 pos, SurfacePoint point, float depth) {
    vec3 finalColor = vec3(0.0);
    for (int i = 0; i < nPointLights; i++) {
        PointLightParams light = computeLightParams(pointLights[i]);
        if (depth < 0.999 && !testShadowAABB(point, light.pos)) {
            float f = evalPointLightStrength(point, light);
            f *= evalFogAbsorption(point, slInfo);
            finalColor += f * light.intensity;
        }
    }

    uint rndState = getRandSeed(uvec3(pos, slInfo.randomSeed));

#define BRUTEFORCE_EMITTER_SAMPLES 50
#define BRUTEFORCE_AREA_SAMPLES 1
    for (int i = 0; i < BRUTEFORCE_EMITTER_SAMPLES; i++) {
        int emitterIdx = int(floor(nextRand(rndState) * nEmissiveTriangles));
        vec3 contrib = vec3(0);

        vec3 emitterN, emission;
        float area;
        getEmissiveTriangle(emitterIdx, emission, emitterN, area);

        for (int j = 0; j < BRUTEFORCE_AREA_SAMPLES; j++) {
            vec3 emitter = pickRndPointOnTriangle(
                    emissiveTris[emitterIdx].x.xyz, emissiveTris[emitterIdx].y.xyz, emissiveTris[emitterIdx].z.xyz, rndState);
            if (depth < 0.999 && !testShadowAABB(point, emitter)) {
                contrib += evalEmittingPoint(point, emitter, emission, emitterN) * emission * point.albedo;
            }
        }

        contrib *= evalFogAbsorption(point, slInfo);

        // Each sample has probability (1.0 / nEmissiveTriangles) * (1.0 / area)
        finalColor += contrib * area * nEmissiveTriangles / (BRUTEFORCE_AREA_SAMPLES * BRUTEFORCE_EMITTER_SAMPLES);
    }

    return finalColor;
}

// Restir Step 1: fill reservoirs for each pixel
Reservoir fillReservoir(ivec2 pos, SurfacePoint point, float depth, inout uint rndState) {
//    uint rndState = getRandSeed(uvec3(pos, 0));
    Reservoir r = createEmptyReservoir();
    if (depth > 0.999) {
        return r;
    }

    int totalNum = nEmissiveTriangles;
    for (int i = 0; i < slInfo.restirInitialSamples; i++) {
//        int totalNum = nPointLights + nEmissiveTriangles;
//        int lightIdx = int(floor(nextRand(rndState) * totalNum));

        int lightIdx = int(floor(nextRand(rndState) * totalNum)) + nPointLights;

        if (lightIdx < nPointLights) {
            PointLightParams params = computeLightParams(pointLights[lightIdx]);
            float pHat = evalPointLightStrength(point, params);
            float w = pHat * totalNum; // (pHat / p)
            addSample(r, rndState, lightIdx+1, w, pHat, params.pos);
        } else {
            int triIdx = lightIdx - nPointLights;

            vec3 emitterN, emission;
            float area;
            getEmissiveTriangle(triIdx, emission, emitterN, area);
            vec3 emitterPoint = pickRndPointOnTriangle(
                    emissiveTris[triIdx].x.xyz, emissiveTris[triIdx].y.xyz, emissiveTris[triIdx].z.xyz, rndState);

            float pHat = evalEmittingPoint(point, emitterPoint, emission, emitterN);
            float p = 1.0 / (area * totalNum);
            float w = pHat / p;
            addSample(r, rndState, -triIdx-1, w, pHat, emitterPoint);
        }
    }

    // Test visibility and reject samples if that is the case.
    // No need to waste time with them, we hope to get more samples with Spatial and Temporal reuse.
    for (int i = 0; i < NUM_SAMPLES_PER_RESERVOIR; i++) {
        float p = 0.0;
        if (r.selected[i] < 0) {
            vec3 emitterN, emission;
            float area;
            getEmissiveTriangle(-r.selected[i]-1, emission, emitterN, area);
            p = 1.0 / (area * totalNum);
        } else if (r.selected[i] > 0) {
            p = 1.0 / totalNum;
        }

        if (r.pHat[i] * p >= 1e-2 && testShadowAABB(point, r.position[i])) {
            // Lies in shadow => ignore
            r.selected[i] = 0;
            r.pHat[i] = 0;
        }
    }

    return r;
}

void temporalReuse(ivec2 pos, SurfacePoint point, float depth) {
    uint rndState = getRandSeed(uvec3(pos, slInfo.randomSeed));
    Reservoir r = fillReservoir(pos, point, depth, rndState);

    int rIdx = reservoirIdx(pos, slInfo.viewportWidth);

    bool allowReuse = false;
    if (slInfo.restirTemporalFactor > 0 && depth < 0.999) {
        ivec2 resolution = textureSize(motion, 0);

        vec2 motion = texelFetch(motion, pos, 0).xy * 0.5 * vec2(resolution);
        ivec2 uv = ivec2(round(pos + motion));
        if (all(greaterThanEqual(uv, ivec2(0,0))) && all(lessThan(uv, resolution))) {
            // TODO: reconstruct positions, that should give even more precise results
            float prevDepth = texelFetch(prevDepth, uv, 0).r;
            if (abs(prevDepth - depth) < 0.01) {
                vec3 prevNormal = texelFetch(prevNormal, uv, 0).xyz;
                if (dot(prevNormal, point.N) > 0.5) {
                    vec3 prevAlbedo = texelFetch(prevAlbedo, uv, 0).rgb;
                    prevAlbedo -= point.albedo;
                    if (dot(prevAlbedo, prevAlbedo) < 0.01) {
                        allowReuse = true;
                    }
                }
            }

            if (allowReuse) {
                // We can reuse samples!
                int prevRIdx = reservoirIdx(uv, slInfo.viewportWidth);
                tryMergeReservoir(rndState, r, reservoirsOld[prevRIdx],
                        slInfo.restirTemporalFactor * r.totalNumSamples, point);
            }
        }
    }

    reservoirsTmp[rIdx] = r;
}

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    if (pos.x > slInfo.viewportWidth || pos.y > slInfo.viewportHeight) {
        return;
    }

    float depth = texelFetch(depth, pos, 0).r;

    SurfacePoint point;
    point.worldPos = calculatePosition(depth, vec2(pos), slInfo);
    point.albedo = texelFetch(albedo, pos, 0).rgb;

    vec4 N = texelFetch(normal, pos, 0);
    point.N = N.xyz;
    point.dispAlongN = N.w;

    vec3 color = vec3(1, 0, 0);
    if (slInfo.lightAlgo == 0) {
        temporalReuse(pos, point, depth);
        return;
    } else if (slInfo.lightAlgo == 1) {
        color = naiveLighting(point, depth);
    } else if (slInfo.lightAlgo == 2) {
        color = naiveLightingBVH(pos, point, depth);
    }

    imageStore(compositeLight, ivec2(pos), vec4(color, 1.0));
}
