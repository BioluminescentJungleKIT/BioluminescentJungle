#version 450

#include "util.glsl"
#include "geometry.glsl"

layout(set = 0, binding = 0) uniform sampler2D albedo;
layout(set = 0, binding = 1) uniform sampler2D depth;
layout(set = 0, binding = 2) uniform sampler2D normal;
layout(set = 0, binding = 3) uniform sampler2D motion;

layout(set = 1, binding = 0) uniform writeonly image2D compositeLight;
layout(set = 1, binding = 1, std140) uniform LightInfoBlock {
    SceneLightInfo slInfo;
};

struct PointLight {
    vec4 position; // just xyz
    vec4 color; // just xyz
    vec4 intensity; // just x
};

layout(std140, set = 1, binding = 2) readonly buffer PointLightIn {
    PointLight pointLights[];
};

layout(std140, set = 1, binding = 3) uniform Params {
    int nPointLights;
    int nTriangles;
};

layout(std140, set = 1, binding = 4) readonly buffer TrianglesIn {
    Triangle tris[];
};

layout(std140, set = 1, binding = 5) readonly buffer BVHIn {
    BVHNode bvh[];
};

#define MAX_STACK_SIZE 32

bool testShadowBruteforce(vec3 worldPos, vec3 lightPos) {
    Ray lightRay;
    lightRay.origin = worldPos;
    lightRay.dir = lightPos - worldPos;

    float len = length(lightRay.dir);
    lightRay.dir /= len;
    lightRay.invDir = 1.0 / lightRay.dir;
    const vec2 tmimaxInit = vec2(0.03, len);

    for (int i = 0; i < nTriangles; i++) {
        float f = intersectTriangle(tris[i], lightRay);
        if (tmimaxInit.x <= f && f < tmimaxInit.y) {
            return true;
        }
    }

    return false;
}

bool testShadowAABB(vec3 worldPos, vec3 lightPos) {
    Ray lightRay;
    lightRay.origin = worldPos;
    lightRay.dir = lightPos - worldPos;

    float len = length(lightRay.dir);
    lightRay.dir /= len;
    lightRay.invDir = 1.0 / lightRay.dir;

    int stack[MAX_STACK_SIZE];
    stack[0] = 0;
    int cur = 0;

    const vec2 tmimaxInit = vec2(0.03, len);

    // Recursive test in the BVH
    while (cur >= 0) {
        int node = stack[cur];
        cur -= 1;

        // Leaf node
        if (bvh[node].left <= 0) {
            float f = intersectTriangle(tris[-bvh[node].left], lightRay);
            if (tmimaxInit.x <= f && f < tmimaxInit.y) {
                return true;
            }

            continue;
        }

        // Split node: test AABB, if yes, check the two children
        vec3 aabb[2];
        aabb[0] = bvh[node].low.xyz;
        aabb[1] = bvh[node].high.xyz;

        vec2 isec = intersectAABB(aabb, lightRay, tmimaxInit);
        if (isec.x <= isec.y) {
            stack[cur + 1] = bvh[node].left;
            stack[cur + 2] = bvh[node].right;
            cur += 2;
        }
    }

    return false;
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

PointLightParams computeLightParams(int lightId) {
    PointLightParams light;
    light.pos = pointLights[lightId].position.xyz;
    light.intensity = pointLights[lightId].color.rgb * pointLights[lightId].intensity.x/55;
    light.r = exp(0.5);
    return light;
}

// Very naive lighting: shoot a ray to each light, bruteforce hit triangles.
vec3 naiveLighting(SurfacePoint point, float depth) {
    vec3 finalColor = vec3(0.0);
    for (int i = 0; i < nPointLights; i++) {
        PointLightParams light = computeLightParams(i);
        if (depth >= 0.999 || !testShadowBruteforce(point.worldPos, light.pos)) {
            finalColor += evalPointLight(point, light, slInfo);
        }
    }

    return finalColor;
}

// Naive lighting: shoot a ray to each light source, but use BVH for shadow ray.
vec3 naiveLightingBVH(SurfacePoint point, float depth) {
    vec3 finalColor = vec3(0.0);
    for (int i = 0; i < nPointLights; i++) {
        PointLightParams light = computeLightParams(i);
        if (depth >= 0.999 || !testShadowAABB(point.worldPos, light.pos)) {
            finalColor += evalPointLight(point, light, slInfo);
        }
    }

    return finalColor;
}

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    if (pos.x > slInfo.viewportWidth || pos.y > slInfo.viewportHeight) {
        return;
    }

    float depth = texelFetch(depth, pos, 0).r;

    SurfacePoint point;
    point.worldPos = calculatePosition(depth, vec2(pos), slInfo);
    point.albedo = texelFetch(albedo, pos, 0).rgb;
    point.N = texelFetch(normal, pos, 0).xyz;

    vec3 color = vec3(1, 0, 0);

    if (slInfo.lightAlgo == 0) {
    } else if (slInfo.lightAlgo == 1) {
        color = naiveLighting(point, depth);
    } else if (slInfo.lightAlgo == 2) {
        color = naiveLightingBVH(point, depth);
    }

    imageStore(compositeLight, ivec2(pos), vec4(color, 1.0));
}
